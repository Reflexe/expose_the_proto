from typing import Dict, List, Union

from analyze.table import Table
from generate.table_generator import TableGenerator, FilePath, FileContent


class KotlinExposedGenerator(TableGenerator):
    class _Context:
        _imports: List[str]

        def __init__(self):
            self._imports = []

        def add_import(self, name: str):
            self._imports.append(name)

        FILE_NAME_TEMPLATE = FilePath("{table_name}.kt")

        EOL = "\n"

        _PACKAGE_LINE_TEMPLATE = "package {}"
        # TODO: version
        _TABLE_FILE_TEMPLATE = FileContent('''
// Generated by expose_the_proto.py VERSION
{package_line}
{imports}
{table}
        ''')

        _TABLE_FIELD_TEMPLATE = "val {name} = {database_type}(name = \"{name}\")"

        _TABLE_TEMPLATE = '''
object {name} : {table_type} {{
    {fields}
}}'''

        _INT_ID_TABLE = "IntIdTable"
        _TABLE = "Table"

        def _generate_field(self, field: Union[Table.Field, Table.ReferencingField]):
            references = ''
            if isinstance(field, Table.ReferencingField):
                referenced_table: Table = field.referenced_table
                table_symbol_path = referenced_table.full_name

                self.add_import(table_symbol_path)
                references = " references {symbol}.{field}".format(
                    symbol=table_symbol_path,
                    field='id' if field.referenced_field.is_table_id else field.referenced_field.name)

            return self._TABLE_FIELD_TEMPLATE.format(
                name=field.name,
                database_type=field.type.type,
            ) + references

        def _generate_table(self, table: Table):
            return self._TABLE_TEMPLATE.format(
                name=table.table_name,
                table_type=self._INT_ID_TABLE if table.is_id_table() else self._TABLE,
                fields=self.EOL.join(self._generate_field(field)
                                     for field in table.fields if not field.is_table_id)
            )

        def generate_file_for_table(self, table: Table):
            return self._TABLE_FILE_TEMPLATE.format(
                package_line=self._PACKAGE_LINE_TEMPLATE.format(
                    table.package
                ) if table.package != Table.EmptyPackage else '',
                # TODO: imports
                imports="",
                table=self._generate_table(table)
            )

    def generate_table(self, table: Table) -> Dict[FilePath, FileContent]:
        context = self._Context()

        return {
            FilePath(context.FILE_NAME_TEMPLATE.format(table_name=table.table_name)):
                context.generate_file_for_table(table)
        }
